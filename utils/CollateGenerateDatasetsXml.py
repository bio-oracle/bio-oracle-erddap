#!/usr/bin/env python

"""
This script takes all the files generated with LoopGenerateDatasetsXml and collates them as a 
single datasets.xml file.

Some formatting may also be done, e.g. adding attributes from sourceAttributes to addAttributes.
"""

from datetime import datetime
from glob import glob
from pathlib import Path
from shutil import copyfile
import xml.etree.ElementTree as ET

from tqdm import tqdm


def main():
    print("Collating datasets into a single XML file.")

    main_xml = "./erddap/content/datasets_template.xml"
    xml_snips = glob("./logs/datasets/*.xml")

    # Load main tree from template
    main_tree = ET.parse(main_xml)
    main_root = main_tree.getroot()

    failed = []
    dataset_ids = []

    # Loop over snips of XML generated by LoopGenerateDatasetsXml
    for xml in tqdm(xml_snips):
        try:
            # Remove comments
            with open(xml) as f:
                lines = f.readlines()
                lines = [ i.replace("<!-- ", "<").replace(" -->", ">") for i in lines ]

            # Write new file without comments
            with open(xml, "w") as f:
                for line in lines:
                    f.write(line)

            # Parse XML
            snip_tree = ET.parse(xml)
            snip_root = snip_tree.getroot()

            # Flag the desired dataset to be refreshed
            dataset_id = snip_root.get("datasetID")
            dataset_ids.append(dataset_id)

            # Extract decades and SSP from datasetID
            decades = ["-".join(dataset_id.split("_")[-5:-3]),]
            ssp = dataset_id.split("_")[1]  # TO-DO: change this for sourceAttributes.experiment
            ssp = [ssp.upper() if "ssp" in ssp else ssp.capitalize(),]

            # Iterate over sourceAttributes and add them to addAttributes
            addAttributes = snip_root.find("addAttributes")
            sourceAttributes = snip_root.find("sourceAttributes")
            for attr in sourceAttributes.iterfind("att"):
                if (title_attr := attr).get("name") == "title":
                    title_attr.text = title_attr.text.replace(".", " ") + " ".join(ssp + decades) + "."
                addAttributes.append(attr)

            # Remove sourceAttributes
            snip_root.remove(sourceAttributes)
                
            # Add dataset to main tree
            main_root.append(snip_root)
        except ET.ParseError:  # for empty files
            failed.append(xml)
            pass

    datasets_file = "./erddap/content/datasets.xml"

    backup = lambda file: copyfile(file, Path("./erddap/content/history/").joinpath(datetime.now().strftime("%Y-%m-%d-%T") + "." + str(Path(file).name)))
    
    # Back up the old file
    try:
        backup(datasets_file)
    except FileNotFoundError:  # In case no file exists
        pass

    # Write the new file
    
    main_tree.write(datasets_file, encoding="utf-8")

    xml_string = '<?xml version="1.0" encoding="ISO-8859-1" ?>'

    with open(datasets_file, "r+") as f:
        r = f.read()
        f.seek(0, 0)
        f.write(xml_string + "\n")
        f.write(r)
    
    print(f"Created file at '{datasets_file}'. Backup files are in 'erddap/content/history'.")
    if failed:
        print(f"Failed for {len(failed)} files:")
        print("\t\n".join(failed))
        print("Check the XML snippets to see what's wrong. If they are empty, it is likely that GenerateDatasetsXml.sh couldn't find the original files.")

    print(f"Refreshing {len(dataset_ids)} datasets.")
    for dataset_id in dataset_ids:
        Path(f"./erddap/data/flag/{dataset_id}").touch()

if __name__ == "__main__":
    main()
